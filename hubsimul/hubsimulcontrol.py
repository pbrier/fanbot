"""Subclass of HubSimulFrame, which is generated by wxFormBuilder."""

import wx
import array
import time
import threading

from hubsimul import HubSimul
from hubsimulserver import HubSimulServer

from hubsimulframe import  HubSimulFrame
from bitmap import Bitmap


# Implementing HubSimulFrame
class HubSimulControl(HubSimulFrame ):
	def __init__( self, parent):
		HubSimulFrame.__init__( self, parent )
		
		
		panel = self.panelRawBitmap
		sizer = panel.GetSizer()	
		self.bitmap = Bitmap(panel,50,20) 
		sizer.Add( self.bitmap, 1, wx.EXPAND )
		
		# start listeneing on port 1234
		self.server = HubSimulServer(self)

		self.alive = threading.Event()
		self.event = None

		self.hubs = []

		for i in range (42):
			hub = HubSimul(i * 24)
			self.hubs.append(hub)
					
		self.startThread()

        
	def __del__( self ):
		print "destructor ..."
		self.server.shutdown()
		
	def handleClientRequest(self,opcode,data):
		self.bitmap.fromCompressedBuffer(data)
			
		
	def startThread(self):
		
		"""Start the wave  thread"""		
		self.thread = threading.Thread(target=self.TribuneWaveThread)
		self.thread.setDaemon(1)
		self.alive.set()
		self.thread.start()

	def stopThread(self):
		"""Stop the receiver thread, wait util it's finished."""
		print "Stop thread ..."
		self.alive.clear()		  #clear alive event for thread
		if hasattr(self, 'thread') and self.thread != None:
			self.thread.join()		  #wait until thread has finished
			self.thread = None
		print "Stop thread done ..."
		
	def TribuneWaveThread(self):
		print "Starting thread TribuneWaveThread"
		while(True):
			time.sleep(1)

		

			