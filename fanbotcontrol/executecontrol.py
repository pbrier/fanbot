"""Subclass of HubSimulFrame, which is generated by wxFormBuilder."""

import wx
import copy
from fanbotframe import PanelExecute
import os
import wx.lib.evtmgr as em
import fanbotevent


from fanbotframe import  PanelDrawIcon

from bitmap import Bitmap
from banner import Banner

# Implementing HubSimulFrame
class ExecuteControl(PanelExecute ):
    def __init__( self, parent, remote):
        """ remote is instance of HubProtocol for communication with remote"""

        PanelExecute.__init__( self, parent )
        self.remote = remote
        print 'ExecuteControl constructor  '
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.timerAnimate, self.timer)
        self.animateIdx = 0
        self.repeat = False
        self.bitmap = Bitmap(50,20)
        self.initFileList('.gif')   
        self.scaleX = 1
        self.scaleY = 1
        self.Refresh()
  
    def stopSendingFrames(self):
        self.timer.Stop()

        
    def initFileList(self,extension):
        """ gif files are intepreted as animated gifs, containing more frames
            bmp files are intepreted as info files shifted from left to right to the viewport:
        """
        self.listExec.Clear()
        for fname in os.listdir("data"):
            #print 'testing file ' , fname
           
            if extension  in fname :
                #print fname
                self.listExec.Append(fname)
        self.Refresh()        
 
                    
    def panelIconCanvasOnPaint( self, event ):
        dc = wx.PaintDC(self.panelIconCanvas)
        dc.BeginDrawing()
        dc.SetUserScale(self.scaleX, self.scaleY)
        dc.Clear()
#        dc.ComputeScaleAndOrigin()
#        dc.SetMapMode(wx.MM_POINTS)

        dc.DrawBitmap(self.bitmap.getLargeBitmap(),0,0)
        dc.EndDrawing()
        
     



    def toolBrush1OnToolClicked( self, event ):
        self.brush = '1'
    
    def toolBrush4OnToolClicked( self, event ):
        self.brush = '4'
    
    def toolBrush9OnToolClicked( self, event ):
        self.brush = '9'

    
    def toolDrawLineOnToolClicked( self, event ):
        print 'drawBox'
        self.drawMode = 1

    def toolDrawDotOnToolClicked( self, event ):
        print 'drawDot'
        self.drawMode = 0
    


    
 
    def panelCanvasOnSize( self, event ):
        rect = self.panelCanvas.GetRect()

        self.scaleX = rect.GetWidth() / self.bitmap.width
        self.scaleY = rect.GetHeight() / self.bitmap.height
        #print 'Scale x:y',self.scaleX,':',self.scaleY
        self.Refresh()
        
    def panelCanvasOnPaint( self, event ):
        dc = wx.PaintDC(self.panelCanvas)
        dc.BeginDrawing()
        dc.SetUserScale(self.scaleX, self.scaleY)
        dc.Clear()
#        dc.ComputeScaleAndOrigin()
#        dc.SetMapMode(wx.MM_POINTS)

        dc.DrawBitmap(self.bitmap.getBitmap(),0,0)
        dc.EndDrawing()
  
    def sliderSpeedOnScroll( self, event ):
        speed = self.sliderSpeed.GetValue()
        if speed == 0:
            self.timer.Stop()
        else :
            self.timer.Start(1000 -speed * 100)
 
    def timerAnimate(self,event):
        """  """
        self.animateIdx += 1
        if self.animateIdx >= self.bitmap.getFrameCount():
            if self.checkRepeat.IsChecked():
                self.animateIdx = 0
            else:
                self.timer.Stop()    
        self.bitmap.setFrameNr(self.animateIdx)  
        self.Refresh()  
        data = self.bitmap.getCompressedArray()
        self.remote.sendFanbotFrame(data)
 
    
    def listExecOnListBox( self, event ):
        fname = event.GetString()
        print 'selected: ', fname
        if fname.endswith('.bmp'):
            self.bitmap = Banner(50,20,"data/" + fname)
        if fname.endswith('.gif'):
            self.bitmap = Bitmap(50,20,"data/" + fname)
    
        self.animateIdx = 0;
        if 0 ==  self.sliderSpeed.GetValue():
            self.bitmap.setFrameNr(0)  
            data = self.bitmap.getCompressedArray()
            self.remote.sendFanbotFrame(data)
        else:    
            self.timer.Start()
        self.Refresh()    
        
    def radioFileTypeOnRadioBox( self, event ):
        if self.radioFileType.GetSelection() == 0:
            self.initFileList('.gif')    
        if self.radioFileType.GetSelection() == 1:
            self.initFileList('.bmp')    
        
  