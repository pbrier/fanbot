"""Subclass of HubSimulFrame, which is generated by wxFormBuilder."""

import wx
import copy

from fanbotframe import PanelProxy
from fanbotconfig import FanbotConfig
from hubprotocol import HubProtocol
import os
import SocketServer
import threading
import fanbotevent 
import time
import json

from fanbotframe import  PanelDrawIcon

from bitmap import Bitmap
from banner import Banner
      
# Implementing HubSimulFrame
class ProxyControl(PanelProxy):
    alive = True
    instance = None
    
    def __init__( self, parent,remote):
        """ remote is instance of HubProtocol for communication with remote"""
        PanelProxy.__init__( self, parent )
        self.remote = remote
        print 'ProxyControl constructor  '
        self.scaleX = 1
        self.scaleY = 1
        self.server = None
        ProxyControl.instance = self
        self.bitmap = Bitmap(FanbotConfig.width,FanbotConfig.height)
        self.Refresh()
     # Virtual event handlers, overide them in your derived class


    def __del__( self ):
        print "proxycontrol destructor ..."
        self.shutdown()
        
    def panelProxyCanvasOnPaint( self, event ):
        dc = wx.PaintDC(self.panelProxyCanvas)
        dc.BeginDrawing()
        dc.SetUserScale(self.scaleX, self.scaleY)
        dc.Clear()
        dc.DrawBitmap(self.bitmap.getBitmap(),0,0)
        dc.EndDrawing()
        
     
    def panelProxyCanvasOnSize( self, event ):
        rect = self.panelProxyCanvas.GetRect()

        self.scaleX = rect.GetWidth() / self.bitmap.width
        self.scaleY = rect.GetHeight() / self.bitmap.height
        #print 'Scale x:y',self.scaleX,':',self.scaleY
        self.Refresh()
 
    def startProxyServer(self):    
        self.buttonProxyStartOnButtonClick(None)
 
    def buttonProxyStartOnButtonClick( self, event ):
        evt = fanbotevent.FanbotEvent(fanbotevent.EVT_PROXY_SERVER_ID,self.GetId())
        
        if self.buttonProxyStart.GetLabel() == 'Start':
            self.initProxyServer();
            time.sleep(1)
            if ProxyControl.alive:
                self.buttonProxyStart.SetLabel('Stop')
                evt.setPayload('started')
                wx.PostEvent(self,evt)
                print 'proxy server started'
            else:           
                print 'unable to start proxy server '


            
        else:
            dlg = wx.MessageDialog(self, 'Zeker weten?!',
                           'Stop proxy server, ' ,
                           wx.OK| wx.CANCEL | wx.ICON_INFORMATION )
            result = dlg.ShowModal() 
            dlg.Destroy()
            if wx.ID_OK  ==result:
                self.shutdown();
                self.buttonProxyStart.SetLabel('Start')
                evt.setPayload('stopped')
                wx.PostEvent(self,evt)
                print 'proxy server stopped'       
            


    def initProxyServer(self):
        """Start the server  thread"""        
        self.thread = threading.Thread(target=self.proxyServerThread)
        self.thread.setDaemon(1)
        self.thread.start()

        
    def proxyServerThread(self):
        print "Starting socket server thread "
        portstr = FanbotConfig.getProxyPort() 
        port = int(portstr)
        host = "localhost"
        self.labelProxyHost.SetLabel( '%s : %d' % (host,port) )
        ProxyControl.alive = True
        try: 
            self.server = SocketServer.ThreadingTCPServer((host, port), ProxyHandler)
            self.server.serve_forever()
        except Exception as e:
            print "unable to start server: ", e.message  
            self.shutdown()
        
    def shutdown(self):
        ProxyControl.alive = False
        if self.server:
            self.server.shutdown()
            self.server = None

    
class ProxyHandler(SocketServer.BaseRequestHandler):
    connections = 0
    """
    The RequestHandler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """
    def setup(self):
        print self.client_address, 'connected!'
        ProxyHandler.connections += 1
        ProxyControl.instance.labelConnectionNr.SetLabel(str(ProxyHandler.connections))
        

    def finish(self):
        print self.client_address, 'disconnected!'
        ProxyHandler.connections -= 1
        ProxyControl.instance.labelConnectionNr.SetLabel(str(ProxyHandler.connections))
    
    def handle(self):
#        self.handleJson()
        self.handlePlain()

    def handlePlain(self):
        """ 
           Char.   Hex.    Function
    ~~~~~~  ~~~~~~  ~~~~~~~~~~~~~~~~~
     '^'    0x5E    Start of frame. Go to cell (0,0) the upper left corner 
     '*'    0x2A    Turn cell ON
     ' '    0x20    Advance pointer, do not change anything
     '\n'   0x0A    Goto beginning of next line
     '\r'   0x10    Do nothing (Ignore)
     other          Turn cell OFF 
        """    
        print "Client connected: %s" % self.client_address[0]
        state = 0
        index = 0
        alive = True
        array = None
        while ProxyControl.alive and alive:
            try:
                data = self.request.recv(1024)
                print 'rec:' ,data
                proxy = ProxyControl.instance
                for c in data:
                    if state == 0:
                        if c == "^": 
                            proxy.bitmap.loadFromBufferStart()
                            state = 1 
                    elif state == 1:
                        if c == '*':
                            data = 200
                        else:
                            data = 5
                        proxy.bitmap.loadFromBufferAppend(data)
                        if c == '\n':
                            proxy.bitmap.loadFromBufferFinish()
                            proxy.Refresh()
                            if proxy.remote:
                                data = proxy.bitmap.getCompressedArray()
                                proxy.remote.sendFanbotFrame(data)
                            state = 0
                            # self.request.send("ok")
            except Exception as e:
                print "server handle:exception %s %s"% (e.__class__.__name__, e.message)
                alive = False        
        print "Client disconnected: %s" % self.client_address[0]
        
        
        
    def handleJson(self):                
        print "Client connected: %s" % self.client_address[0]
        state = 0
        index = 0
        alive = True
        array = None
        while ProxyControl.alive and alive:
            try:
                data = self.request.recv(1024)
                print 'Received raw data: ' ,data
                data = data.strip()
                data = json.loads(data)
                # process the data, i.e. print it:
                print 'Received json data: ' , data
                # send some 'ok' back
                self.request.sendall(json.dumps({'status':'ok','version':'0.0.1'}))
            except Exception, e:
                print "Exception wile receiving message: ", e
                alive = False


